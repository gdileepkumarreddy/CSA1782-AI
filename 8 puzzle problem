import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None):
        self.state = state
        self.parent = parent
        self.move = move
        self.cost = self.calculate_cost()

    def calculate_cost(self):
        cost = 0
        for i in range(9):
            if self.state[i] != 0:
                goal_row = (self.state[i] - 1) // 3
                goal_col = (self.state[i] - 1) % 3
                current_row = i // 3
                current_col = i % 3
                cost += abs(goal_row - current_row) + abs(goal_col - current_col)
        return cost

    def __lt__(self, other):
        return self.cost < other.cost

def get_neighbors(state):
    neighbors = []
    empty_index = state.index(0)
    moves = [-3, 3, -1, 1]
    for move in moves:
        new_index = empty_index + move
        if 0 <= new_index < 9 and abs(empty_index // 3 - new_index // 3) <= 1:
            new_state = state[:]
            new_state[empty_index], new_state[new_index] = new_state[new_index], new_state[empty_index]
            neighbors.append(new_state)
    return neighbors

def a_star_search(initial_state):
    open_list = [PuzzleNode(initial_state)]
    closed_set = set()

    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.state == [1, 2, 3, 4, 5, 6, 7, 8, 0]:
            return current_node

        closed_set.add(tuple(current_node.state))

        neighbors = get_neighbors(current_node.state)
        for neighbor_state in neighbors:
            if tuple(neighbor_state) not in closed_set:
                neighbor_node = PuzzleNode(neighbor_state, current_node)
                heapq.heappush(open_list, neighbor_node)

    return None

def print_solution(node):
    moves = []
    while node:
        moves.append(node.move)
        node = node.parent
    moves.reverse()

    for move in moves:
        if move is not None:
            print(move)

initial_state = [int(x) for x in input("Enter the initial state of the puzzle (9 numbers separated by spaces): ").split()]
if len(initial_state) != 9 or set(initial_state) != set(range(9)):
    print("Invalid input. Please enter a valid permutation of 0 to 8.")
else:
    solution_node = a_star_search(initial_state)
    if solution_node:
        print_solution(solution_node)
    else:
        print("No solution found.")
